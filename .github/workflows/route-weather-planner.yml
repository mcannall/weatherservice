name: Route Weather Planner CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'route-weather-planner/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'route-weather-planner/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/route-weather-planner

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update version
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "VERSION = '0.1.0-${SHORT_SHA}'" > route-weather-planner/version.py
          cat route-weather-planner/version.py

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./route-weather-planner
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          
          # Add OCI CLI to PATH
          echo "$HOME/bin" >> $GITHUB_PATH
          echo "/home/runner/bin" >> $GITHUB_PATH
          
          # Verify installation
          ls -la $HOME/bin || echo "bin directory not found in HOME"
          ls -la /home/runner/bin || echo "bin directory not found in /home/runner"
          
          # Explicitly export PATH for this step
          export PATH="$HOME/bin:$PATH"
          export PATH="/home/runner/bin:$PATH"
          
          # Verify OCI CLI is available
          which oci || echo "OCI CLI not found in PATH"

      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private.pem
          chmod 600 ~/.oci/private.pem

      - name: Get OKE kubeconfig
        run: |
          # Ensure OCI CLI is in PATH
          export PATH="$HOME/bin:$PATH"
          export PATH="/home/runner/bin:$PATH"
          
          # Try to find the OCI executable
          OCI_CMD=$(which oci || echo "/home/runner/bin/oci")
          
          if [ ! -f "$OCI_CMD" ]; then
            echo "OCI CLI not found at $OCI_CMD"
            find $HOME -name "oci" 2>/dev/null || echo "Could not find oci executable"
            exit 1
          fi
          
          echo "Using OCI CLI at: $OCI_CMD"
          
          # Create kubeconfig with explicit path to OCI CLI
          $OCI_CMD ce cluster create-kubeconfig --cluster-id ${{ secrets.OKE_CLUSTER_ID }} --file $HOME/.kube/config --region us-chicago-1 --token-version 2.0.0
          chmod 600 $HOME/.kube/config

      - name: Create image pull secret
        run: |
          kubectl delete secret ghcr-secret --ignore-not-found
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment file with SHA
        run: |
          sed -i "s/\${GITHUB_SHA}/${{ github.sha }}/g" route-weather-planner/k8s/deployment.yaml

      - name: Deploy to OKE
        run: |
          kubectl apply -f route-weather-planner/k8s/deployment.yaml
          kubectl rollout status deployment/route-planner --timeout=300s

  test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Test route-weather-planner container
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          API_URL: http://localhost:80
        run: |
          echo "Starting container with Gunicorn..."
          docker run -d -p 5000:5000 \
            --name route-weather-planner \
            --env GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} \
            --env API_URL=http://localhost:80 \
            ghcr.io/${{ github.repository }}/route-weather-planner:${{ github.sha }} \
            --workers=4 --bind=0.0.0.0:5000 --access-logfile=- --error-logfile=- --log-level=info --preload wsgi:app
          
          echo "Container started. Checking container status..."
          docker ps
          echo "Container logs (first 100 lines):"
          docker logs route-weather-planner | head -n 100
          
          echo "Waiting for Gunicorn to be ready..."
          for i in {1..60}; do  # Increased timeout to 2 minutes
            echo "Attempt $i to connect to Gunicorn..."
            if curl -s http://localhost:5000/ > /dev/null; then
              echo "Gunicorn is ready!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Gunicorn failed to start within timeout"
              echo "Container logs:"
              docker logs route-weather-planner
              echo "Container status:"
              docker ps -a
              exit 1
            fi
            sleep 2
          done
          
          # Test the route weather endpoint
          echo "Testing route weather endpoint..."
          TEST_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{"addresses":["New York, NY", "Boston, MA"], "interval_distance": 10}' http://localhost:5000/get_route_weather)
          echo "Route weather endpoint response: $TEST_RESPONSE"
          if [[ $TEST_RESPONSE != *"route"* ]]; then
            echo "Route weather endpoint test failed"
            echo "Container logs:"
            docker logs route-weather-planner
            exit 1
          fi
          
          echo "All tests passed!"
          echo "Cleaning up..."
          docker stop route-weather-planner
          docker rm route-weather-planner
          echo "Cleanup complete"

  # Add a new job to output workflow information
  debug-info:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Output Workflow Information
        run: |
          echo "Workflow name: ${{ github.workflow }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"
          echo "This information is intended to help debug workflow triggers" 
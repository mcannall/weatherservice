name: Route Weather Planner CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'route-weather-planner/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'route-weather-planner/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/route-weather-planner

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=sha-
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./route-weather-planner
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          # Update the deployment with the new image
          kubectl set image deployment/route-weather-planner \
            route-weather-planner=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/route-weather-planner 

  test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Test route-weather-planner container
        run: |
          echo "Starting container..."
          docker run -d -p 5000:5000 --name route-weather-planner ghcr.io/${{ github.repository }}/route-weather-planner:latest
          
          echo "Container started. Checking container status..."
          docker ps
          echo "Container logs (first 100 lines):"
          docker logs route-weather-planner | head -n 100
          
          echo "Waiting for Gunicorn to be ready..."
          for i in {1..30}; do
            echo "Attempt $i to connect to Gunicorn..."
            if curl -s http://localhost:5000/ > /dev/null; then
              echo "Gunicorn is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Gunicorn failed to start within timeout"
              echo "Container logs:"
              docker logs route-weather-planner
              echo "Container status:"
              docker ps -a
              exit 1
            fi
            sleep 2
          done
          
          # Test the route weather endpoint
          echo "Testing route weather endpoint..."
          TEST_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{"addresses":["New York, NY", "Boston, MA"], "interval_distance": 10}' http://localhost:5000/get_route_weather)
          echo "Route weather endpoint response: $TEST_RESPONSE"
          if [[ $TEST_RESPONSE != *"route"* ]]; then
            echo "Route weather endpoint test failed"
            echo "Container logs:"
            docker logs route-weather-planner
            exit 1
          fi
          
          echo "All tests passed!"
          echo "Cleaning up..."
          docker stop route-weather-planner
          docker rm route-weather-planner
          echo "Cleanup complete" 
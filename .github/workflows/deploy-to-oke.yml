name: Deploy to Oracle Kubernetes Engine

on:
  workflow_run:
    workflows: 
      - "Route Weather Planner CI/CD"
    types:
      - completed
    branches:
      - main
  push:
    branches: [ main ]
    paths:
      - 'route-weather-planner/**'
      - 'k8s/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Deploy to OKE
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Install and configure OCI CLI
        run: |
          # Install OCI CLI
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "$HOME/oracle-cli/bin" >> $GITHUB_PATH
          
          # Configure OCI CLI
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          
          # Create config file
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_CLI_USER }}
          fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_CLI_TENANCY }}
          region=${{ secrets.OCI_REGION }}
          key_file=~/.oci/oci_api_key.pem
          EOF
          chmod 600 ~/.oci/config

      - name: Configure kubectl
        run: |
          oci ce cluster create-kubeconfig \
            --cluster-id ${{ secrets.OCI_CLUSTER_ID }} \
            --file $HOME/.kube/config \
            --region ${{ secrets.OCI_REGION }} \
            --token-version 2.0.0
          chmod 600 $HOME/.kube/config

      - name: Create secrets
        run: |
          # Create or update the secrets
          kubectl create secret generic weatherservice-secrets \
            --from-literal=OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY }} \
            --from-literal=GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify and wait for images
        run: |
          # Get the SHA to use
          if [ -n "${{ github.event.workflow_run.head_sha }}" ]; then
            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          else
            COMMIT_SHA="${{ github.sha }}"
          fi
          
          echo "Using commit SHA: $COMMIT_SHA"
          
          # Function to verify image availability with retries
          verify_image() {
            local image=$1
            local max_attempts=10
            local wait_time=30
            
            echo "Verifying availability of image: $image"
            
            for i in $(seq 1 $max_attempts); do
              if docker pull $image >/dev/null 2>&1; then
                echo "✓ Successfully pulled image: $image"
                return 0
              fi
              echo "Attempt $i/$max_attempts: Image not available yet. Waiting ${wait_time}s..."
              sleep $wait_time
            done
            
            echo "✗ Failed to verify image: $image after $max_attempts attempts"
            return 1
          }
          
          # Verify both images
          verify_image "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/route-weather-planner:$COMMIT_SHA" || exit 1
          verify_image "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$COMMIT_SHA" || exit 1
          
          # Set the SHA for later steps
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV

      - name: Update deployment files with SHA
        run: |
          # Update deployment YAML with the SHA
          sed -i "s/\${GITHUB_SHA}/${{ env.COMMIT_SHA }}/g" k8s/deployment.yaml

      - name: Apply Kubernetes manifests
        run: |
          # Apply all manifests
          kubectl apply -f k8s/
          
          # Wait for deployments with increased timeout
          kubectl rollout status deployment/weather-api --timeout=5m
          kubectl rollout status deployment/route-planner --timeout=5m

      - name: Verify deployments
        run: |
          # Display pod information
          echo "Current pods:"
          kubectl get pods -o wide
          
          # Display service information
          echo "Service endpoints:"
          kubectl get services -l app=weatherservice
          
          # Display events that might indicate issues
          echo "Recent events:"
          kubectl get events --sort-by='.lastTimestamp' | tail -n 20 
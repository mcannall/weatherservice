name: Test Oracle Cloud Connectivity

on:
  workflow_dispatch:
    inputs:
      run-oracle-list-cmd:
        description: 'Run Oracle list command'
        type: boolean
        default: true
      run-oke-test:
        description: 'Test OKE Kubernetes connection'
        type: boolean
        default: true
      region:
        description: 'Oracle Cloud Region (default: us-chicago-1)'
        required: false
        type: string
        default: 'us-chicago-1'
      cluster_id:
        description: 'OKE Cluster ID (leave empty to use secret)'
        required: false
        type: string

jobs:
  test-oci-connectivity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OCI CLI
        run: |
          echo "Installing OCI CLI..."
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          
          # Add OCI CLI to PATH
          echo "/home/runner/bin" >> $GITHUB_PATH
          
          # Verify installation
          echo "OCI CLI version:"
          /home/runner/bin/oci -v
          
      - name: Configure OCI CLI
        run: |
          echo "Configuring OCI CLI..."
          mkdir -p ~/.oci
          
          # Create private key file
          echo "Creating private key file..."
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          
          # Add OCI_API_KEY label to suppress warning
          echo "OCI_API_KEY" >> ~/.oci/oci_api_key.pem
          
          # Determine region to use
          REGION="${{ github.event.inputs.region }}"
          if [ -z "$REGION" ]; then
            REGION="us-chicago-1"  # Default to Chicago region
          fi
          echo "Using region: $REGION"
          
          # Create config file
          echo "Creating config file..."
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_CLI_USER }}
          fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_CLI_TENANCY }}
          region=$REGION
          key_file=~/.oci/oci_api_key.pem
          EOF
          chmod 600 ~/.oci/config
          
          # Verify files exist
          echo "Verifying config files exist:"
          ls -la ~/.oci/
          
          # Print config file (redacting sensitive info)
          echo "Config file contents (redacted):"
          cat ~/.oci/config | sed 's/user=.*/user=<REDACTED>/g' | sed 's/fingerprint=.*/fingerprint=<REDACTED>/g' | sed 's/tenancy=.*/tenancy=<REDACTED>/g'
          
          # Verify file permissions
          /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/config
          /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/oci_api_key.pem
          
          # Display OCI region
          echo "OCI Region set to: $REGION"
          
          # Test DNS resolution for region endpoint
          echo "Testing DNS resolution for region endpoint..."
          host identity.$REGION.oraclecloud.com || echo "DNS resolution failed - check region name format"
          
          # Try common regions for DNS testing to validate connectivity
          echo "Testing DNS resolution for known Oracle Cloud regions..."
          echo "US East (Ashburn):"
          host identity.us-ashburn-1.oraclecloud.com || echo "Failed to resolve US East region"
          echo "US West (Phoenix):"
          host identity.us-phoenix-1.oraclecloud.com || echo "Failed to resolve US West region"

      - name: Test OCI Connectivity without Specific Region
        run: |
          echo "Testing basic OCI connectivity with global endpoint..."
          
          # Suppress the label warning
          export SUPPRESS_LABEL_WARNING=True
          
          # Try connecting to a global endpoint that doesn't require region
          /home/runner/bin/oci --debug iam region list
          
      - name: Test OCI Connectivity with Debug Mode
        run: |
          echo "Testing basic OCI connectivity with debug mode..."
          # Set timeout environment variable
          export OCI_CLI_CALL_TIMEOUT=300
          # Suppress the label warning
          export SUPPRESS_LABEL_WARNING=True
          
          # Determine region to use
          REGION="${{ github.event.inputs.region }}"
          if [ -z "$REGION" ]; then
            REGION="us-chicago-1"  # Default to Chicago region
          fi
          
          # Try a simple command first
          echo "Testing region list command..."
          /home/runner/bin/oci --debug iam region list
          
          # Try availability domain command
          echo "Testing availability domain listing..."
          /home/runner/bin/oci --debug iam availability-domain list --region $REGION
          echo "✓ Successfully connected to OCI and listed availability domains"
      
      - name: List OCI Resources
        if: ${{ github.event.inputs.run-oracle-list-cmd == 'true' && success() }}
        run: |
          echo "Listing OCI resources..."
          # Determine region to use
          REGION="${{ github.event.inputs.region }}"
          if [ -z "$REGION" ]; then
            REGION="us-chicago-1"  # Default to Chicago region
          fi
          
          echo "Compartments:"
          /home/runner/bin/oci iam compartment list --region $REGION
          
          echo "Regions:"
          /home/runner/bin/oci iam region list
          
          echo "✓ Successfully listed OCI resources"
      
      - name: List Available OKE Clusters
        if: ${{ github.event.inputs.run-oke-test == 'true' && success() }}
        run: |
          # Determine region to use
          REGION="${{ github.event.inputs.region }}"
          if [ -z "$REGION" ]; then
            REGION="us-chicago-1"  # Default to Chicago region
          fi
          
          echo "Listing available OKE clusters in region $REGION..."
          /home/runner/bin/oci --debug ce cluster list --region $REGION
          
          # Find root compartment ID
          echo "Finding root compartment ID..."
          ROOT_COMPARTMENT_ID=$(/home/runner/bin/oci iam compartment list --all --compartment-id-in-subtree true --access-level ACCESSIBLE --include-root --query "data[?\"compartment-id\" == null].id | [0]" --raw-output --region $REGION)
          echo "Root compartment ID: $ROOT_COMPARTMENT_ID"
          
          echo "Listing clusters in all compartments..."
          COMPARTMENTS=$(/home/runner/bin/oci iam compartment list --compartment-id $ROOT_COMPARTMENT_ID --all --query "data[*].id" --raw-output --region $REGION)
          
          echo "List of compartments: $COMPARTMENTS"
          
          # List clusters in each compartment
          for COMPARTMENT_ID in $COMPARTMENTS; do
            echo "Listing clusters in compartment: $COMPARTMENT_ID"
            /home/runner/bin/oci ce cluster list --compartment-id $COMPARTMENT_ID --region $REGION || echo "Failed to list clusters in this compartment"
          done
          
          # Also check the root compartment
          echo "Listing clusters in root compartment..."
          /home/runner/bin/oci ce cluster list --compartment-id $ROOT_COMPARTMENT_ID --region $REGION || echo "Failed to list clusters in root compartment"
      
      - name: Test OKE Kubernetes Connection
        if: ${{ github.event.inputs.run-oke-test == 'true' && success() }}
        run: |
          echo "Testing OKE Kubernetes connection..."
          
          # Determine region to use
          REGION="${{ github.event.inputs.region }}"
          if [ -z "$REGION" ]; then
            REGION="us-chicago-1"  # Default to Chicago region
          fi
          
          # Determine cluster ID to use
          CLUSTER_ID="${{ github.event.inputs.cluster_id }}"
          if [ -z "$CLUSTER_ID" ]; then
            CLUSTER_ID="${{ secrets.OCI_CLUSTER_ID }}"
            echo "Using cluster ID from secrets: ${CLUSTER_ID:0:8}... (truncated for security)"
          else
            echo "Using cluster ID from input: ${CLUSTER_ID:0:8}... (truncated for security)"
          fi
          
          # Verify that the cluster ID exists
          echo "Verifying cluster ID..."
          CLUSTER_EXISTS=$(/home/runner/bin/oci ce cluster get --cluster-id "$CLUSTER_ID" --region $REGION 2>/dev/null || echo "CLUSTER_NOT_FOUND")
          
          if [[ "$CLUSTER_EXISTS" == "CLUSTER_NOT_FOUND" ]]; then
            echo "Error: Cluster with ID ${CLUSTER_ID:0:8}... not found"
            echo "Please check the OCI_CLUSTER_ID secret or provide a valid cluster ID in the workflow input"
            exit 1
          fi
          
          echo "Cluster found! Generating kubeconfig..."
          
          # Generate kubeconfig
          mkdir -p $HOME/.kube
          /home/runner/bin/oci ce cluster create-kubeconfig \
            --cluster-id "$CLUSTER_ID" \
            --file $HOME/.kube/config \
            --region $REGION \
            --token-version 2.0.0
          
          chmod 600 $HOME/.kube/config
          
          # Verify connection
          kubectl get nodes
          echo "✓ Successfully connected to OKE Kubernetes cluster" 